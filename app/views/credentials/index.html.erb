<div style="max-width: 800px; margin: 0 auto; padding: 20px;">
  <div style="margin-bottom: 20px;">
    <%= link_to "← Back to Diaries", diaries_path %>
  </div>

  <h1>Manage Passkeys</h1>

  <p style="color: #666; margin-bottom: 30px;">
    Passkeys let you sign in securely using your fingerprint, face, or device PIN. They're more secure than passwords and easier to use.
  </p>

  <div style="margin-bottom: 30px;">
    <button id="register-passkey-btn" style="padding: 12px 24px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 1em; font-weight: bold;">
      Add a Passkey
    </button>
  </div>

  <% if @credentials.any? %>
    <h2 style="margin-bottom: 20px;">Your Passkeys</h2>
    <% @credentials.each do |credential| %>
      <div style="border: 1px solid #ddd; padding: 15px; margin-bottom: 15px; border-radius: 5px; display: flex; justify-content: space-between; align-items: center;">
        <div>
          <h3 style="margin: 0 0 10px 0;"><%= credential.nickname %></h3>
          <p style="color: #666; font-size: 0.9em; margin: 0;">
            Created: <%= credential.created_at.strftime("%Y-%m-%d %H:%M") %>
          </p>
        </div>
        <div>
          <%= button_to "Remove", credential_path(credential), method: :delete, data: { turbo_confirm: "Are you sure you want to remove this passkey?" }, style: "padding: 8px 16px; background-color: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer;" %>
        </div>
      </div>
    <% end %>
  <% else %>
    <p style="color: #666;">You haven't added any passkeys yet. Add one to enable secure, password-free sign-in.</p>
  <% end %>
</div>

<script>
document.getElementById('register-passkey-btn').addEventListener('click', async function() {
  try {
    // ニックネームを入力
    const nickname = prompt('Give this passkey a name (e.g., "My iPhone", "Work Laptop"):');
    if (!nickname) return;

    // サーバーからチャレンジを取得
    const optionsResponse = await fetch('/credentials/new.json', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!optionsResponse.ok) {
      throw new Error('Failed to get registration options');
    }

    const options = await optionsResponse.json();

    // Base64URLエンコードされた文字列をArrayBufferに変換
    options.user.id = base64urlDecode(options.user.id);
    options.challenge = base64urlDecode(options.challenge);

    if (options.excludeCredentials) {
      options.excludeCredentials = options.excludeCredentials.map(cred => ({
        ...cred,
        id: base64urlDecode(cred.id)
      }));
    }

    // WebAuthn APIを使用して認証情報を作成
    const credential = await navigator.credentials.create({ publicKey: options });

    // 認証情報をサーバーに送信
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    const registerResponse = await fetch('/credentials', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({
        nickname: nickname,
        id: base64urlEncode(credential.rawId),
        rawId: base64urlEncode(credential.rawId),
        type: credential.type,
        response: {
          attestationObject: base64urlEncode(credential.response.attestationObject),
          clientDataJSON: base64urlEncode(credential.response.clientDataJSON)
        }
      })
    });

    const result = await registerResponse.json();

    if (result.success) {
      alert('Passkey registered successfully!');
      location.reload();
    } else {
      alert('Registration failed: ' + (result.error || result.errors.join(', ')));
    }
  } catch (error) {
    console.error('Error:', error);
    alert('Failed to register passkey: ' + error.message);
  }
});

// Base64URL utility functions
function base64urlDecode(base64url) {
  const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
  const binString = atob(base64);
  const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));
  return bytes.buffer;
}

function base64urlEncode(buffer) {
  const bytes = new Uint8Array(buffer);
  let binary = '';
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}
</script>
